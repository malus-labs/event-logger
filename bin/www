#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('event-logger:server');
var http = require('http');
const Web3 = require('web3');
const storeHubABI = require('../abi/storeHub');
const StoreCreated = require('../event_handling/StoreCreated');
const PermissionUpdated = require('../event_handling/PermissionUpdated');
const StakeUpdated = require('../event_handling/StakeUpdated');
const BalanceUpdated = require('../event_handling/BalanceUpdated');
const CollateralReliefUpdated = require('../event_handling/CollateralReliefUpdated');
const CollateralGenerated = require('../event_handling/CollateralGenerated');
const CollateralReleased = require('../event_handling/CollateralReleased');
const MetaDataUpdated = require('../event_handling/MetaDataUpdated');

/**
 * Setting up web3 along with the main smart contract.
 */

if (typeof web3 !== 'undefined') {
  web3 = new Web3(web3.currentProvider);
} else { 
  web3 = new Web3(new Web3.providers.WebsocketProvider("ws://localhost:8545"));
}



var storeHub = new web3.eth.Contract(storeHubABI, '0x138921268C50aA838a0cA581953f267A0392e91B');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Events listening for Websocket Web3 server "listening" event.
 */

storeHub.events.StoreCreated({}, function(error, result) {
  if (!error) {
    StoreCreated(result.returnValues.storeId, result.returnValues.store, result.returnValues.owner)
  } else {
    console.log(error);
  }
});

storeHub.events.PermissionUpdated({}, function(error, result) {
  if (!error) {
    PermissionUpdated(result.returnValues.storeId, result.returnValues.approvalAddress, 
      result.returnValues.permisionType, result.returnValues.isApproved);
  } else {
    console.log(error);
  }
});

storeHub.events.StakeUpdated({}, function(error, result) { 
  if (!error) {
    const fundsInEther = web3.utils.fromWei(result.returnValues.avaiableFunds, 'ether');
    const stakeInEther = web3.utils.fromWei(result.returnValues.amount, 'ether');
    StakeUpdated(result.returnValues.storeId, stakeInEther, fundsInEther, result.returnValues.expireTime);
  } else {
    console.log(error);
  }
});

storeHub.events.BalanceUpdated({}, function(error, result) {
  if (!error) {
    const amountInEther = web3.utils.fromWei(result.returnValues.amount, 'ether');
    BalanceUpdated(result.returnValues.storeId, amountInEther);
  } else {
    console.log(error);
  }
});

storeHub.events.CollateralReliefUpdated({}, function(error, result) { 
  if (!error) {
    const rate = result.returnValues.rate / 100;
    const fundsInEther = web3.utils.fromWei(result.returnValues.avaiableFunds, 'ether');
    const collateralInEther = web3.utils.fromWei(result.returnValues.collateralRelief, 'ether');
    CollateralReliefUpdated(result.returnValues.storeId, collateralInEther, fundsInEther, rate);
  } else {
    console.log(error);
  }
});

storeHub.events.CollateralGenerated({}, function(error, result) { 
  if (!error) {
    const collateralInEther = web3.utils.fromWei(result.returnValues.collateral, 'ether');
    const stakeInEther = web3.utils.fromWei(result.returnValues.stake, 'ether');
    const fundsInEther = web3.utils.fromWei(result.returnValues.avaiableFunds, 'ether');
    CollateralGenerated(result.returnValues.storeId, collateralInEther, stakeInEther, fundsInEther);
  } else {
    console.log(error);
  }
});

storeHub.events.CollateralReleased({}, function(error, result) { 
  if (!error) {
    const collateralInEther = web3.utils.fromWei(result.returnValues.collateral, 'ether');
    const fundsInEther = web3.utils.fromWei(result.returnValues.avaiableFunds, 'ether');
    CollateralReleased(result.returnValues.storeId, collateralInEther, fundsInEther);
  } else {
    console.log(error);
  }
});

storeHub.events.MetaDataUpdated({}, function(error, result) {
  if (!error) {
    MetaDataUpdated(result.returnValues.storeId, result.returnValues.metaData);
  } else {
    console.log(error);
  }
});
